/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ModelService } from "../model.service";
import { ModelCreateInput } from "./ModelCreateInput";
import { Model } from "./Model";
import { ModelFindManyArgs } from "./ModelFindManyArgs";
import { ModelWhereUniqueInput } from "./ModelWhereUniqueInput";
import { ModelUpdateInput } from "./ModelUpdateInput";
import { TemplateFindManyArgs } from "../../template/base/TemplateFindManyArgs";
import { Template } from "../../template/base/Template";
import { TemplateWhereUniqueInput } from "../../template/base/TemplateWhereUniqueInput";

export class ModelControllerBase {
  constructor(protected readonly service: ModelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Model })
  async createModel(@common.Body() data: ModelCreateInput): Promise<Model> {
    return await this.service.createModel({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Model] })
  @ApiNestedQuery(ModelFindManyArgs)
  async models(@common.Req() request: Request): Promise<Model[]> {
    const args = plainToClass(ModelFindManyArgs, request.query);
    return this.service.models({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Model })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async model(
    @common.Param() params: ModelWhereUniqueInput
  ): Promise<Model | null> {
    const result = await this.service.model({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Model })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateModel(
    @common.Param() params: ModelWhereUniqueInput,
    @common.Body() data: ModelUpdateInput
  ): Promise<Model | null> {
    try {
      return await this.service.updateModel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Model })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteModel(
    @common.Param() params: ModelWhereUniqueInput
  ): Promise<Model | null> {
    try {
      return await this.service.deleteModel({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/templates")
  @ApiNestedQuery(TemplateFindManyArgs)
  async findTemplates(
    @common.Req() request: Request,
    @common.Param() params: ModelWhereUniqueInput
  ): Promise<Template[]> {
    const query = plainToClass(TemplateFindManyArgs, request.query);
    const results = await this.service.findTemplates(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        model: {
          select: {
            id: true,
          },
        },

        name: true,
        params: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/templates")
  async connectTemplates(
    @common.Param() params: ModelWhereUniqueInput,
    @common.Body() body: TemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templates: {
        connect: body,
      },
    };
    await this.service.updateModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/templates")
  async updateTemplates(
    @common.Param() params: ModelWhereUniqueInput,
    @common.Body() body: TemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templates: {
        set: body,
      },
    };
    await this.service.updateModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/templates")
  async disconnectTemplates(
    @common.Param() params: ModelWhereUniqueInput,
    @common.Body() body: TemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templates: {
        disconnect: body,
      },
    };
    await this.service.updateModel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
