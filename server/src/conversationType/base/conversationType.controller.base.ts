/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConversationTypeService } from "../conversationType.service";
import { ConversationTypeCreateInput } from "./ConversationTypeCreateInput";
import { ConversationType } from "./ConversationType";
import { ConversationTypeFindManyArgs } from "./ConversationTypeFindManyArgs";
import { ConversationTypeWhereUniqueInput } from "./ConversationTypeWhereUniqueInput";
import { ConversationTypeUpdateInput } from "./ConversationTypeUpdateInput";

export class ConversationTypeControllerBase {
  constructor(protected readonly service: ConversationTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ConversationType })
  async createConversationType(
    @common.Body() data: ConversationTypeCreateInput
  ): Promise<ConversationType> {
    return await this.service.createConversationType({
      data: {
        ...data,

        template: data.template
          ? {
              connect: data.template,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        key: true,

        template: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ConversationType] })
  @ApiNestedQuery(ConversationTypeFindManyArgs)
  async conversationTypes(
    @common.Req() request: Request
  ): Promise<ConversationType[]> {
    const args = plainToClass(ConversationTypeFindManyArgs, request.query);
    return this.service.conversationTypes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        key: true,

        template: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ConversationType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async conversationType(
    @common.Param() params: ConversationTypeWhereUniqueInput
  ): Promise<ConversationType | null> {
    const result = await this.service.conversationType({
      where: params,
      select: {
        createdAt: true,
        id: true,
        key: true,

        template: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ConversationType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConversationType(
    @common.Param() params: ConversationTypeWhereUniqueInput,
    @common.Body() data: ConversationTypeUpdateInput
  ): Promise<ConversationType | null> {
    try {
      return await this.service.updateConversationType({
        where: params,
        data: {
          ...data,

          template: data.template
            ? {
                connect: data.template,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          key: true,

          template: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ConversationType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConversationType(
    @common.Param() params: ConversationTypeWhereUniqueInput
  ): Promise<ConversationType | null> {
    try {
      return await this.service.deleteConversationType({
        where: params,
        select: {
          createdAt: true,
          id: true,
          key: true,

          template: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
